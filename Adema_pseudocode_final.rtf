{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Baskerville;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14760\viewh13060\viewkind0
\deftab720
\pard\pardeftab720\ri0\partightenfactor0

\f0\fs22 \cf0 A reaction time study in Psychopy (v. 3.2.3)\
\pard\pardeftab720\ri0\qc\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\partightenfactor0
\cf0 I will be running a target-detection study in Psychopy, where the main measure of interest is reaction time (RT). Although the experiment will be initially be constructed from the Builder, the majority of the experiment will be made in the Coder. The stimuli consist of images of scenes (all resized to a resolution of 1600x1067 using the PIL library), and two targets. The timeline of each trial is as follows: fixation (500 ms), preview (166.7 ms), fixation (500 ms), search (up to 10 seconds). Participants will be required to find the target in the image, and respond with a key press as soon as the target has been spotted. Reaction time will be recorded automatically by the application. Each target corresponds to a unique key, as the key press will also serve as an attention-check; I plan to use response accuracy as a criterion of exclusion. There are 120 trials in total. After each trial, a \'91ready?\'92 screen will be presented in which a fixation cross is included. From there, participants begin the next trial. A break will be included halfway through the experiment. Data analysis will be done in R. \
I have already coded my experiment, and will reverse-engineer the pseudocode. \
\
\
Pseudocode\
.csv files will list the target locations for each image, as well as which responses are correct. They are also the condition files, assigned to each participant randomly by the program. \
\
\pard\pardeftab720\ri0\partightenfactor0

\f1 \cf0 Psychopy initialization code (importing packages, etc.)\
\
Preload images (import glob\'85)\
\
Experiment info (date, session, participant number\'85)\
Logging info\
>These are done automatically by the program\
\
Window setup\
>Done automatically by the program
\f0 \

\f1 \
Set up individual experiment components\
>Instructions\
>>text, fixation, target examples, keyboard response\
>Fixation\
>>fixation point, timer\
>Preview\
>>search image, fixation point, timer\
>Search task\
>>search image, target image, keyboard response, prompt if slow, timer\
>\'92Ready?\'92\
>>text, fixation, keyboard response\
>pause (midway through experiment)\
>>text, fixation, keyboard\
>\'92Thank you!\'92\
>>text\
\
Present instructions\
>until last page of instructions:\
>>when keyboard response is made, show next page of instructions\
>>if last page, proceed to fixation\
\
Before loop\'85\
>randomly pick condition .csv file (import random).\
BEGIN LOOP (FIXATION, PREVIEW, FIXATION, SEARCH, \'91READY?\'92)\
>Randomly choose image from condition file \
Fixation\
>present cross for 500 ms.\
>then, show preview immediately.\
Preview\
>Present search image with fixation for 166.67ms\
>then, show blank screen with fixation immediately.\
Fixation\
>present fixation cross for 500ms.\
>then, show search image immediately\
Search\
>Present search image, with target image placed according to condition file\
>If response made by keyboard < 10 s:\
>>proceed to \'91ready?\'92\
>If no response made by 10 s:\
>>Interrupt search task with a text prompt, telling them to be faster\
>>when keyboard response is made, proceed to \'91ready?\'92\
>Record response\
Ready?\
>Load next image, chosen randomly (ISI)\
>When keyboard response is made, begin next trial (new loop iteration).\
>>UNLESS it\'92s trial 60!\
>>>then, proceed to \'91pause\'92.\
Pause\
>If trial 60, present this component. Otherwise, skip.\
>When keyboard response is made, start next iteration of loop.\
END LOOP\
\
Finish\
>If loop has gone through 120 iterations, present this.\
>End of experiment.}